//HumanoidLTL_747_Humanoid automatically_translated 

set ControlledActions = {leftmotor.fwd, leftmotor.bwd, leftmotor.stop, leftmotor.turn_fwd, leftmotor.turn_bwd, leftmotor.calib_turn, leftmotor.calib_fwd, rightmotor.fwd, rightmotor.bwd, rightmotor.stop, rightmotor.turn_fwd, rightmotor.turn_bwd, rightmotor.calib_turn, rightmotor.calib_fwd, headmotor.fwd, headmotor.bwd, headmotor.stop, spec_nextmovemode.fwd, spec_nextmovemode.bwd, spec_nextmovemode.turn_left, spec_specstate.q0, spec_specstate.q1, spec_specstate.q2, spec_specstate.q3, spec_turnstate.t0, spec_turnstate.t1, spec_turnstate.t2, spec_turnstate.t3, spec_nexthead.n, spec_nexthead.so, tick, sys_constraint[29].respondsto.responded, not_sys_constraint[29].respondsto.responded, env_constraint[53].respondsto.responded, not_env_constraint[53].respondsto.responded, env_constraint[55].respondsto.responded, not_env_constraint[55].respondsto.responded, prev_39_0, not_prev_39_0, prev_52_1, not_prev_52_1}
set UncontrolledActions = {obstacle.clear, obstacle.blocked, noise.quiet, noise.noise, heading.n, heading.so, button.free, button.pressed, tock}
set AllActions = {ControlledActions, UncontrolledActions}


set Obstacle_Actions = {obstacle.clear, obstacle.blocked}
fluent OBSTACLE_CLEAR = <obstacle.clear, Obstacle_Actions\{obstacle.clear}>
fluent OBSTACLE_BLOCKED = <obstacle.blocked, Obstacle_Actions\{obstacle.blocked}>

set Noise_Actions = {noise.quiet, noise.noise}
fluent NOISE_QUIET = <noise.quiet, Noise_Actions\{noise.quiet}>
fluent NOISE_NOISE = <noise.noise, Noise_Actions\{noise.noise}>

set Heading_Actions = {heading.n, heading.so}
fluent HEADING_N = <heading.n, Heading_Actions\{heading.n}>
fluent HEADING_SO = <heading.so, Heading_Actions\{heading.so}>

set Button_Actions = {button.free, button.pressed}
fluent BUTTON_FREE = <button.free, Button_Actions\{button.free}>
fluent BUTTON_PRESSED = <button.pressed, Button_Actions\{button.pressed}>

set LeftMotor_Actions = {leftmotor.fwd, leftmotor.bwd, leftmotor.stop, leftmotor.turn_fwd, leftmotor.turn_bwd, leftmotor.calib_turn, leftmotor.calib_fwd}
fluent LEFTMOTOR_FWD = <leftmotor.fwd, LeftMotor_Actions\{leftmotor.fwd}>
fluent LEFTMOTOR_BWD = <leftmotor.bwd, LeftMotor_Actions\{leftmotor.bwd}>
fluent LEFTMOTOR_STOP = <leftmotor.stop, LeftMotor_Actions\{leftmotor.stop}>
fluent LEFTMOTOR_TURN_FWD = <leftmotor.turn_fwd, LeftMotor_Actions\{leftmotor.turn_fwd}>
fluent LEFTMOTOR_TURN_BWD = <leftmotor.turn_bwd, LeftMotor_Actions\{leftmotor.turn_bwd}>
fluent LEFTMOTOR_CALIB_TURN = <leftmotor.calib_turn, LeftMotor_Actions\{leftmotor.calib_turn}>
fluent LEFTMOTOR_CALIB_FWD = <leftmotor.calib_fwd, LeftMotor_Actions\{leftmotor.calib_fwd}>

set RightMotor_Actions = {rightmotor.fwd, rightmotor.bwd, rightmotor.stop, rightmotor.turn_fwd, rightmotor.turn_bwd, rightmotor.calib_turn, rightmotor.calib_fwd}
fluent RIGHTMOTOR_FWD = <rightmotor.fwd, RightMotor_Actions\{rightmotor.fwd}>
fluent RIGHTMOTOR_BWD = <rightmotor.bwd, RightMotor_Actions\{rightmotor.bwd}>
fluent RIGHTMOTOR_STOP = <rightmotor.stop, RightMotor_Actions\{rightmotor.stop}>
fluent RIGHTMOTOR_TURN_FWD = <rightmotor.turn_fwd, RightMotor_Actions\{rightmotor.turn_fwd}>
fluent RIGHTMOTOR_TURN_BWD = <rightmotor.turn_bwd, RightMotor_Actions\{rightmotor.turn_bwd}>
fluent RIGHTMOTOR_CALIB_TURN = <rightmotor.calib_turn, RightMotor_Actions\{rightmotor.calib_turn}>
fluent RIGHTMOTOR_CALIB_FWD = <rightmotor.calib_fwd, RightMotor_Actions\{rightmotor.calib_fwd}>

set HeadMotor_Actions = {headmotor.fwd, headmotor.bwd, headmotor.stop}
fluent HEADMOTOR_FWD = <headmotor.fwd, HeadMotor_Actions\{headmotor.fwd}>
fluent HEADMOTOR_BWD = <headmotor.bwd, HeadMotor_Actions\{headmotor.bwd}>
fluent HEADMOTOR_STOP = <headmotor.stop, HeadMotor_Actions\{headmotor.stop}>

set Spec_nextMoveMode_Actions = {spec_nextmovemode.fwd, spec_nextmovemode.bwd, spec_nextmovemode.turn_left}
fluent SPEC_NEXTMOVEMODE_FWD = <spec_nextmovemode.fwd, Spec_nextMoveMode_Actions\{spec_nextmovemode.fwd}>
fluent SPEC_NEXTMOVEMODE_BWD = <spec_nextmovemode.bwd, Spec_nextMoveMode_Actions\{spec_nextmovemode.bwd}>
fluent SPEC_NEXTMOVEMODE_TURN_LEFT = <spec_nextmovemode.turn_left, Spec_nextMoveMode_Actions\{spec_nextmovemode.turn_left}>

set Spec_specState_Actions = {spec_specstate.q0, spec_specstate.q1, spec_specstate.q2, spec_specstate.q3}
fluent SPEC_SPECSTATE_Q0 = <spec_specstate.q0, Spec_specState_Actions\{spec_specstate.q0}>
fluent SPEC_SPECSTATE_Q1 = <spec_specstate.q1, Spec_specState_Actions\{spec_specstate.q1}>
fluent SPEC_SPECSTATE_Q2 = <spec_specstate.q2, Spec_specState_Actions\{spec_specstate.q2}>
fluent SPEC_SPECSTATE_Q3 = <spec_specstate.q3, Spec_specState_Actions\{spec_specstate.q3}>

set Spec_turnState_Actions = {spec_turnstate.t0, spec_turnstate.t1, spec_turnstate.t2, spec_turnstate.t3}
fluent SPEC_TURNSTATE_T0 = <spec_turnstate.t0, Spec_turnState_Actions\{spec_turnstate.t0}>
fluent SPEC_TURNSTATE_T1 = <spec_turnstate.t1, Spec_turnState_Actions\{spec_turnstate.t1}>
fluent SPEC_TURNSTATE_T2 = <spec_turnstate.t2, Spec_turnState_Actions\{spec_turnstate.t2}>
fluent SPEC_TURNSTATE_T3 = <spec_turnstate.t3, Spec_turnState_Actions\{spec_turnstate.t3}>

set Spec_nextHead_Actions = {spec_nexthead.n, spec_nexthead.so}
fluent SPEC_NEXTHEAD_N = <spec_nexthead.n, Spec_nextHead_Actions\{spec_nexthead.n}>
fluent SPEC_NEXTHEAD_SO = <spec_nexthead.so, Spec_nextHead_Actions\{spec_nexthead.so}>

set SYS_CONSTRAINT_29_respondsTo_responded_Actions = {sys_constraint[29].respondsto.responded, not_sys_constraint[29].respondsto.responded}
fluent SYS_CONSTRAINT_29_RESPONDSTO_RESPONDED = <sys_constraint[29].respondsto.responded, SYS_CONSTRAINT_29_respondsTo_responded_Actions\{sys_constraint[29].respondsto.responded}>

set ENV_CONSTRAINT_53_respondsTo_responded_Actions = {env_constraint[53].respondsto.responded, not_env_constraint[53].respondsto.responded}
fluent ENV_CONSTRAINT_53_RESPONDSTO_RESPONDED = <env_constraint[53].respondsto.responded, ENV_CONSTRAINT_53_respondsTo_responded_Actions\{env_constraint[53].respondsto.responded}>

set ENV_CONSTRAINT_55_respondsTo_responded_Actions = {env_constraint[55].respondsto.responded, not_env_constraint[55].respondsto.responded}
fluent ENV_CONSTRAINT_55_RESPONDSTO_RESPONDED = <env_constraint[55].respondsto.responded, ENV_CONSTRAINT_55_respondsTo_responded_Actions\{env_constraint[55].respondsto.responded}>

set PREV_39_0_Actions = {prev_39_0, not_prev_39_0}
fluent PREV_39_0 = <prev_39_0, PREV_39_0_Actions\{prev_39_0}>

set PREV_52_1_Actions = {prev_52_1, not_prev_52_1}
fluent PREV_52_1 = <prev_52_1, PREV_52_1_Actions\{prev_52_1}>


// move from synchronous play to asynchronous representation
Clock = Env_turn,
Env_turn = (tock -> Sys_turn | {UncontrolledActions}\{tock} -> Env_turn),
Sys_turn = (tick -> Env_turn | {ControlledActions}\{tick} -> Sys_turn).

Turns(N=1) = Controller[N],
Controller[i:1..N] = ({ControlledActions}\{tick} -> Controller[i-1] | tick -> Controller[N]),
Controller[0] = (tick -> Controller[N]).

||Full_Clock = (Clock || Turns(#ControlledActions)).//|| UTurns(#UncontrolledActions+2)).

//fluent Tick = <tick, AllActions\{tick}>

//assumption, env eventually gives control to sys
fluent Tock = <tock, tick>
assert A_clock = (Tock)

//==================LTL Properties=============================
//=======Starting values=======

ltl_property Initial_SPEC_SPECSTATE = (!tick W (tick && SPEC_SPECSTATE_Q0))
ltl_property Initial_SPEC_TURNSTATE = (!tick W (tick && SPEC_TURNSTATE_T0))
ltl_property Initial_SPEC_NEXTHEAD = (!tick W (tick && SPEC_NEXTHEAD_SO))
ltl_property Initial_SPEC_NEXTMOVEMODE = (!tick W (tick && SPEC_NEXTMOVEMODE_FWD))
ltl_property Initial_SYS_CONSTRAINT_29_RESPONDSTO_RESPONDED = (!tick W (tick && SYS_CONSTRAINT_29_RESPONDSTO_RESPONDED))
ltl_property Initial_ENV_CONSTRAINT_53_RESPONDSTO_RESPONDED = (!tick W (tick && ENV_CONSTRAINT_53_RESPONDSTO_RESPONDED))
ltl_property Initial_ENV_CONSTRAINT_55_RESPONDSTO_RESPONDED = (!tick W (tick && ENV_CONSTRAINT_55_RESPONDSTO_RESPONDED))
ltl_property Initial_PREV_39_0 = (!tick W (tick && !PREV_39_0))
ltl_property Initial_PREV_52_1 = (!tick W (tick && !PREV_52_1))
constraint Initial_HEADING = (!tock W (tock && HEADING_N))
constraint Initial_OBSTACLE = (!tock W (tock && OBSTACLE_CLEAR))
||Initial_Values = (Initial_SPEC_SPECSTATE || Initial_SPEC_TURNSTATE || Initial_SPEC_NEXTHEAD || Initial_SPEC_NEXTMOVEMODE || Initial_SYS_CONSTRAINT_29_RESPONDSTO_RESPONDED || Initial_ENV_CONSTRAINT_53_RESPONDSTO_RESPONDED || Initial_ENV_CONSTRAINT_55_RESPONDSTO_RESPONDED || Initial_PREV_39_0 || Initial_PREV_52_1 || Initial_HEADING || Initial_OBSTACLE).


assert G_l0 = (tick && SPEC_NEXTMOVEMODE_FWD)
ltl_property G0 = [](tick -> (OBSTACLE_BLOCKED -> !SPEC_NEXTMOVEMODE_FWD))
ltl_property G1 = [](tick -> (((!SPEC_NEXTMOVEMODE_BWD || X(!tick W (tick && !SPEC_NEXTMOVEMODE_FWD))) || X(!tick W (tick && (LEFTMOTOR_FWD && RIGHTMOTOR_BWD)))) && (X(!tick W (tick && (!LEFTMOTOR_FWD || !RIGHTMOTOR_BWD))) || (SPEC_NEXTMOVEMODE_BWD && X(!tick W (tick && SPEC_NEXTMOVEMODE_FWD))))))
 //((SPEC_NEXTMOVEMODE_BWD && X(!tick W (tick && SPEC_NEXTMOVEMODE_FWD))) <-> X(!tick W (tick && (LEFTMOTOR_FWD && RIGHTMOTOR_BWD))))

ltl_property G2 = [](tick -> (((!SPEC_NEXTMOVEMODE_FWD || X(!tick W (tick && !SPEC_NEXTMOVEMODE_BWD))) || X(!tick W (tick && (LEFTMOTOR_BWD && RIGHTMOTOR_FWD)))) && (X(!tick W (tick && (!LEFTMOTOR_BWD || !RIGHTMOTOR_FWD))) || (SPEC_NEXTMOVEMODE_FWD && X(!tick W (tick && SPEC_NEXTMOVEMODE_BWD))))))
 //((SPEC_NEXTMOVEMODE_FWD && X(!tick W (tick && SPEC_NEXTMOVEMODE_BWD))) <-> X(!tick W (tick && (LEFTMOTOR_BWD && RIGHTMOTOR_FWD))))

ltl_property G3 = [](tick -> (X(!tick W (tick && !SPEC_NEXTMOVEMODE_BWD)) || (SPEC_NEXTMOVEMODE_FWD || SPEC_NEXTMOVEMODE_BWD)))
 //(X(!tick W (tick && SPEC_NEXTMOVEMODE_BWD)) -> (SPEC_NEXTMOVEMODE_FWD || SPEC_NEXTMOVEMODE_BWD))

ltl_property G4 = [](tick -> (SPEC_NEXTMOVEMODE_BWD -> X(!tick W (tick && (SPEC_NEXTMOVEMODE_FWD || SPEC_NEXTMOVEMODE_BWD)))))
ltl_property G5 = [](tick -> (((SPEC_SPECSTATE_Q0 && SPEC_NEXTMOVEMODE_FWD) && X(!tick W (tick && SPEC_NEXTMOVEMODE_BWD))) -> X(!tick W (tick && SPEC_SPECSTATE_Q1))))
ltl_property G6 = [](tick -> (((SPEC_SPECSTATE_Q1 && SPEC_NEXTMOVEMODE_BWD) && X(!tick W (tick && SPEC_NEXTMOVEMODE_FWD))) -> X(!tick W (tick && SPEC_SPECSTATE_Q2))))
ltl_property G7 = [](tick -> (tick && !((SPEC_SPECSTATE_Q2 && SPEC_NEXTMOVEMODE_FWD) && X(!tick W (tick && SPEC_NEXTMOVEMODE_BWD)))))
ltl_property G8 = [](tick -> ((SPEC_SPECSTATE_Q1 && X(!tick W (tick && SPEC_NEXTMOVEMODE_BWD))) -> X(!tick W (tick && SPEC_SPECSTATE_Q1))))
ltl_property G9 = [](tick -> ((SPEC_SPECSTATE_Q2 && X(!tick W (tick && SPEC_NEXTMOVEMODE_FWD))) -> X(!tick W (tick && SPEC_SPECSTATE_Q2))))
ltl_property G10 = [](tick -> (SPEC_NEXTMOVEMODE_TURN_LEFT -> X(!tick W (tick && SPEC_SPECSTATE_Q0))))
ltl_property G11 = [](tick -> (BUTTON_PRESSED -> X(!tick W (tick && (SPEC_NEXTHEAD <-> HEADING)))))
ltl_property G12 = [](tick -> (BUTTON_FREE -> (X(!tick W (tick && SPEC_NEXTHEAD)) <-> SPEC_NEXTHEAD)))
ltl_property G13 = [](tick -> (X(!tick W (tick && SPEC_TURNSTATE_T0)) -> (SPEC_TURNSTATE_T0 || SPEC_TURNSTATE_T3)))
ltl_property G14 = [](tick -> ((SPEC_TURNSTATE_T0 && !SPEC_NEXTMOVEMODE_TURN_LEFT) -> X(!tick W (tick && SPEC_TURNSTATE_T0))))
ltl_property G15 = [](tick -> (((SPEC_NEXTMOVEMODE_TURN_LEFT && PREV_39_0) && SPEC_TURNSTATE_T0) -> X(!tick W (tick && SPEC_TURNSTATE_T1))))
ltl_property G16 = [](tick -> (SPEC_TURNSTATE_T1 -> (X(!tick W (tick && SPEC_TURNSTATE_T2)) && SPEC_NEXTMOVEMODE_TURN_LEFT)))
ltl_property G17 = [](tick -> ((SPEC_TURNSTATE_T2 && SPEC_NEXTMOVEMODE_TURN_LEFT) -> X(!tick W (tick && SPEC_TURNSTATE_T1))))
ltl_property G18 = [](tick -> ((SPEC_TURNSTATE_T2 && SPEC_NEXTMOVEMODE_FWD) -> X(!tick W (tick && SPEC_TURNSTATE_T3))))
ltl_property G19 = [](tick -> ((SPEC_TURNSTATE_T3 && SPEC_NEXTMOVEMODE_FWD) -> X(!tick W (tick && SPEC_TURNSTATE_T0))))
ltl_property G20 = [](tick -> ((SPEC_TURNSTATE_T3 && !SPEC_NEXTMOVEMODE_FWD) -> X(!tick W (tick && SPEC_TURNSTATE_T2))))
ltl_property G21 = [](tick -> ((SPEC_TURNSTATE_T0 && X(!tick W (tick && SPEC_TURNSTATE_T1))) <-> (LEFTMOTOR_CALIB_TURN && RIGHTMOTOR_CALIB_TURN)))
ltl_property G22 = [](tick -> (X(!tick W (tick && SPEC_TURNSTATE_T2)) <-> (LEFTMOTOR_FWD && RIGHTMOTOR_TURN_FWD)))
ltl_property G23 = [](tick -> (SPEC_TURNSTATE_T2 <-> (LEFTMOTOR_BWD && RIGHTMOTOR_TURN_BWD)))
ltl_property G24 = [](tick -> ((SPEC_TURNSTATE_T3 && X(!tick W (tick && SPEC_TURNSTATE_T0))) <-> (LEFTMOTOR_CALIB_FWD && RIGHTMOTOR_CALIB_FWD)))
assert G_l1 = (tick && SYS_CONSTRAINT_29_RESPONDSTO_RESPONDED)


ltl_property G25 = [](tick -> ((X(!tick W (tick && !SYS_CONSTRAINT_29_RESPONDSTO_RESPONDED)) || (((!HEADING || SPEC_NEXTHEAD) && (!SPEC_NEXTHEAD || HEADING)) || (SYS_CONSTRAINT_29_RESPONDSTO_RESPONDED && !NOISE_NOISE))) && ((((HEADING && !SPEC_NEXTHEAD) || (SPEC_NEXTHEAD && !HEADING)) && (!SYS_CONSTRAINT_29_RESPONDSTO_RESPONDED || NOISE_NOISE)) || X(!tick W (tick && SYS_CONSTRAINT_29_RESPONDSTO_RESPONDED)))))
 //(X(!tick W (tick && SYS_CONSTRAINT_29_RESPONDSTO_RESPONDED)) <-> ((HEADING <-> SPEC_NEXTHEAD) || (SYS_CONSTRAINT_29_RESPONDSTO_RESPONDED && !NOISE_NOISE)))

ltl_property G26 = [](tick -> ((X(!tick W (tick && !ENV_CONSTRAINT_53_RESPONDSTO_RESPONDED)) || ((OBSTACLE_CLEAR && X(!tick W (tick && OBSTACLE_CLEAR))) || (ENV_CONSTRAINT_53_RESPONDSTO_RESPONDED && !SPEC_TURNSTATE_T1))) && (((!OBSTACLE_CLEAR || !X(!tick W (tick && OBSTACLE_CLEAR))) && (!ENV_CONSTRAINT_53_RESPONDSTO_RESPONDED || SPEC_TURNSTATE_T1)) || X(!tick W (tick && ENV_CONSTRAINT_53_RESPONDSTO_RESPONDED)))))
 //(X(!tick W (tick && ENV_CONSTRAINT_53_RESPONDSTO_RESPONDED)) <-> ((OBSTACLE_CLEAR && X(!tick W (tick && OBSTACLE_CLEAR))) || (ENV_CONSTRAINT_53_RESPONDSTO_RESPONDED && !SPEC_TURNSTATE_T1)))

ltl_property G27 = [](tick -> ((X(!tick W (tick && !ENV_CONSTRAINT_55_RESPONDSTO_RESPONDED)) || ((((!HEADING || SPEC_NEXTHEAD) && (!SPEC_NEXTHEAD || HEADING)) || !SPEC_NEXTMOVEMODE_TURN_LEFT) || (ENV_CONSTRAINT_55_RESPONDSTO_RESPONDED && !SPEC_NEXTMOVEMODE_TURN_LEFT))) && (((((HEADING && !SPEC_NEXTHEAD) || (SPEC_NEXTHEAD && !HEADING)) && SPEC_NEXTMOVEMODE_TURN_LEFT) && (!ENV_CONSTRAINT_55_RESPONDSTO_RESPONDED || SPEC_NEXTMOVEMODE_TURN_LEFT)) || X(!tick W (tick && ENV_CONSTRAINT_55_RESPONDSTO_RESPONDED)))))
 //(X(!tick W (tick && ENV_CONSTRAINT_55_RESPONDSTO_RESPONDED)) <-> (((HEADING <-> SPEC_NEXTHEAD) || !SPEC_NEXTMOVEMODE_TURN_LEFT) || (ENV_CONSTRAINT_55_RESPONDSTO_RESPONDED && !SPEC_NEXTMOVEMODE_TURN_LEFT)))

ltl_property G28 = [](tick -> ((X(!tick W (tick && !PREV_39_0)) || SPEC_NEXTMOVEMODE_FWD) && (!SPEC_NEXTMOVEMODE_FWD || X(!tick W (tick && PREV_39_0)))))
 //(X(!tick W (tick && PREV_39_0)) <-> SPEC_NEXTMOVEMODE_FWD)

ltl_property G29 = [](tick -> ((X(!tick W (tick && !PREV_52_1)) || SPEC_NEXTMOVEMODE_BWD) && (!SPEC_NEXTMOVEMODE_BWD || X(!tick W (tick && PREV_52_1)))))
 //(X(!tick W (tick && PREV_52_1)) <-> SPEC_NEXTMOVEMODE_BWD)



constraint A0 = [](tock -> ((PREV_39_0 && OBSTACLE_BLOCKED) -> X(!tock W (tock && OBSTACLE_BLOCKED))))
constraint A1 = [](tock -> ((PREV_52_1 && OBSTACLE_CLEAR) -> X(!tock W (tock && !OBSTACLE_BLOCKED))))
constraint A2 = [](tock -> ((SPEC_NEXTMOVEMODE_FWD || SPEC_NEXTMOVEMODE_BWD) -> (X(!tock W (tock && HEADING)) <-> HEADING)))
assert A_l0 = (tock && ENV_CONSTRAINT_53_RESPONDSTO_RESPONDED)
assert A_l1 = (tock && ENV_CONSTRAINT_55_RESPONDSTO_RESPONDED)




||Domain_independent = (Full_Clock).
||Env = (Domain_independent || Initial_Values ||
		A0 || A1 || A2 || G0 || G1 || G2 || G3 || G4 || G5 || G6 || G7 || G8 || G9 || G10 || G11 || G12 || G13 || G14 || G15 || G16 || G17 || G18 || G19 || G20 || G21 || G22 || G23 || G24 || G25 || G26 || G27 || G28 || G29). //safety assumptions and guarantees

controllerSpec Goal = {
       assumption = {A_l0, A_l1, A_clock}  //user liveness assumptions + A_clock
       liveness = {G_l0, G_l1}  //user liveeness guarantees
       controllable = {ControlledActions}
}

heuristic ||Control = (Env)~{Goal}.
checkCompatibility ||CheckControl = (Env)~{Goal}.

||System = (Control || Env).

assert Check = (([]<>A_l0 && []<>A_l1 && A_clock) -> ([]<>G_l0 && []<>G_l1))
assert ASM =   ([]<>A_l0 && []<>A_l1 && A_clock)
assert GNT = ([]<>G_l0 && []<>G_l1)
progress Time  = {tick}
