//GyroLTL_390_GyroAspect automatically_translated 

set ControlledActions = {balancer.stp, balancer.fwd, balancer.bwd, balancer.turn_left, balancer.turn_right, tick, env_constraint[10].respondsto.responded, not_env_constraint[10].respondsto.responded}
set UncontrolledActions = {distsense.clear, distsense.blocked, isready, not_isready, tock}
set AllActions = {ControlledActions, UncontrolledActions}


set Balancer_Actions = {balancer.stp, balancer.fwd, balancer.bwd, balancer.turn_left, balancer.turn_right}
fluent BALANCER_STP = <balancer.stp, Balancer_Actions\{balancer.stp}>
fluent BALANCER_FWD = <balancer.fwd, Balancer_Actions\{balancer.fwd}>
fluent BALANCER_BWD = <balancer.bwd, Balancer_Actions\{balancer.bwd}>
fluent BALANCER_TURN_LEFT = <balancer.turn_left, Balancer_Actions\{balancer.turn_left}>
fluent BALANCER_TURN_RIGHT = <balancer.turn_right, Balancer_Actions\{balancer.turn_right}>

set DistSense_Actions = {distsense.clear, distsense.blocked}
fluent DISTSENSE_CLEAR = <distsense.clear, DistSense_Actions\{distsense.clear}>
fluent DISTSENSE_BLOCKED = <distsense.blocked, DistSense_Actions\{distsense.blocked}>

set IsReady_Actions = {isready, not_isready}
fluent ISREADY = <isready, IsReady_Actions\{isready}>

set ENV_CONSTRAINT_10_respondsTo_responded_Actions = {env_constraint[10].respondsto.responded, not_env_constraint[10].respondsto.responded}
fluent ENV_CONSTRAINT_10_RESPONDSTO_RESPONDED = <env_constraint[10].respondsto.responded, ENV_CONSTRAINT_10_respondsTo_responded_Actions\{env_constraint[10].respondsto.responded}>


// move from synchronous play to asynchronous representation
Clock = Env_turn,
Env_turn = (tock -> Sys_turn | {UncontrolledActions}\{tock} -> Env_turn),
Sys_turn = (tick -> Env_turn | {ControlledActions}\{tick} -> Sys_turn).

Turns(N=1) = Controller[N],
Controller[i:1..N] = ({ControlledActions}\{tick} -> Controller[i-1] | tick -> Controller[N]),
Controller[0] = (tick -> Controller[N]).

||Full_Clock = (Clock || Turns(#ControlledActions)).//|| UTurns(#UncontrolledActions+2)).

//fluent Tick = <tick, AllActions\{tick}>

//assumption, env eventually gives control to sys
fluent Tock = <tock, tick>
assert A_clock = (Tock)

//==================LTL Properties=============================
//=======Starting values=======

ltl_property Initial_BALANCER = (!tick W (tick && BALANCER_STP))
ltl_property Initial_ENV_CONSTRAINT_10_RESPONDSTO_RESPONDED = (!tick W (tick && ENV_CONSTRAINT_10_RESPONDSTO_RESPONDED))
constraint Initial_ISREADY = (!tock W (tock && !ISREADY))
||Initial_Values = (Initial_BALANCER || Initial_ENV_CONSTRAINT_10_RESPONDSTO_RESPONDED || Initial_ISREADY).


ltl_property G0 = [](tick -> (!ISREADY -> BALANCER_STP))
ltl_property G1 = [](tick -> ((DISTSENSE_BLOCKED && ISREADY) -> !BALANCER_FWD))
assert G_l0 = (tick && BALANCER_FWD)
ltl_property G2 = [](tick -> ((DISTSENSE_CLEAR && ISREADY) -> BALANCER_FWD))
ltl_property G3 = [](tick -> (BALANCER_FWD -> X(!tick W (tick && !(BALANCER_TURN_RIGHT || BALANCER_TURN_LEFT)))))
ltl_property G4 = [](tick -> (((DISTSENSE_BLOCKED && BALANCER_STP) && ISREADY) -> X(!tick W (tick && !BALANCER_STP))))


ltl_property G5 = [](tick -> ((X(!tick W (tick && !ENV_CONSTRAINT_10_RESPONDSTO_RESPONDED)) || (DISTSENSE_CLEAR || (ENV_CONSTRAINT_10_RESPONDSTO_RESPONDED && (BALANCER_FWD || BALANCER_STP)))) && ((!DISTSENSE_CLEAR && (!ENV_CONSTRAINT_10_RESPONDSTO_RESPONDED || (!BALANCER_FWD && !BALANCER_STP))) || X(!tick W (tick && ENV_CONSTRAINT_10_RESPONDSTO_RESPONDED)))))
 //(X(!tick W (tick && ENV_CONSTRAINT_10_RESPONDSTO_RESPONDED)) <-> (DISTSENSE_CLEAR || (ENV_CONSTRAINT_10_RESPONDSTO_RESPONDED && !!(BALANCER_FWD || BALANCER_STP))))



assert A_l0 = (tock && ISREADY)
constraint A0 = [](tock -> (ISREADY -> X(!tock W (tock && ISREADY))))
assert A_l1 = (tock && ENV_CONSTRAINT_10_RESPONDSTO_RESPONDED)




||Domain_independent = (Full_Clock).
||Env = (Domain_independent || Initial_Values ||
		A0 || G0 || G1 || G2 || G3 || G4 || G5). //safety assumptions and guarantees

controllerSpec Goal = {
       assumption = {A_l0, A_l1, A_clock}  //user liveness assumptions + A_clock
       liveness = {G_l0}  //user liveeness guarantees
       controllable = {ControlledActions}
}

heuristic ||Control = (Env)~{Goal}.
checkCompatibility ||CheckControl = (Env)~{Goal}.

||System = (Control || Env).

assert Check = (([]<>A_l0 && []<>A_l1 && A_clock) -> ([]<>G_l0))
assert ASM =   ([]<>A_l0 && []<>A_l1 && A_clock)
assert GNT = ([]<>G_l0)
progress Time  = {tick}
